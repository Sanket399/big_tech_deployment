name: CI Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      #- name: Build Docker Image
      #  run: docker build -t myapp:test .
      
      - name: Set Version
        run: |
          echo "IMAGE=vblueice/myapp" >> $GITHUB_ENV
          echo "BUILD_VERSION=build-${{ github.run_number }}" >> $GITHUB_ENV
          echo "APP_VERSION=1.0.${{ github.run_number }}" >> $GITHUB_ENV
          echo "IMAGE_TAGS=vblueice/myapp:build-${{ github.run_number }} vblueice/myapp:1.0.${{ github.run_number }} vblueice/myapp:latest" >> $GITHUB_ENV

     # - name: Set Image Tag
     #   run: echo "IMAGE_TAGS=$IMAGE:$BUILD_VERSION $IMAGE:$APP_VERSION $IMAGE:latest" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and Push Docker Image
        run: |
          for tag in $IMAGE_TAGS; do
            docker build -t $tag .
            docker push $tag
          done

      - name: Create Git Tag
        run : |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git fetch --tags

          if git rev-parse "$APP_VERSION" >/dev/null 2>&1; then
            echo "Tag $APP_VERSION already exists locally. Skipping creation. "
          elif git ls-remote --tags origin | grep "refs/tags/$APP_VERSION" > /dev/null; then
            echo "Tag $APP_VERSION already exists on remote. Skipping creation. "
          else
           echo "Creating and pushing new tag: $APP_VERSION"
           git tag $APP_VERSION
           git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/Sanket399/big_tech_deployment.git $APP_VERSION
          fi
      #- name: Push Docker Image to Docker Hub
      #  run: |
      #    for tag in $IMAGE_TAGS; do
      #      docker push $tag
      #    done

  staging:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Deploy to Staging Env
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ksan
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            docker stop myapp-staging || true
            docker rm myapp-staging || true
            docker pull vblueice/myapp:1.0.${{ github.run_number }}
            docker run -d -p 8081:80 --name myapp-staging vblueice/myapp:1.0.${{ github.run_number }}


      - name: Test health endpoint
        run: |
          sleep 20
          curl -f http://192.168.56.101:8081/doesnotexists

      #- name: Set previous Run Number
      #  if: always()
      #  run: |
      #    echo "PREV_BUILD=$(( ${GITHUB_RUN_NUMBER} - 1 ))" >> $GITHUB_ENV
      #    echo "Previous build number set to $(( ${GITHUB_RUN_NUMBER} - 1 ))"

      - name: Rollback Staging to previous build if health check fails
        if: failure()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ksan
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "Staging health check failed. Rolling back..."
            PREV_BUILD=$(( ${{ github.run_number }} - 1 ))
            docker stop myapp-staging || true
            docker rm myapp-staging || true
            docker run -d -p 8081:80 --name myapp-staging vblueice/myapp:1.0.$PREV_BUILD

  prod:
    needs: staging
    runs-on: self-hosted
    if: ${{ needs.staging.result == 'success' }}
    steps:

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          approvers: ${{ secrets.PROD_APPROVERS }}
          secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Production (Only if Staging Passed)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ksan
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            docker stop myapp-prod || true
            docker rm myapp-prod || true
            docker pull vblueice/myapp:1.0.${{ github.run_number }}
            docker run -d -p 8080:80 --name myapp-prod vblueice/myapp:1.0.${{ github.run_number }}

      - name: Rollback Production if Deployment Fails
        if: failure()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ksan
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "Production deployment failed. Rolling back..."
            PREV_BUILD=$(( ${{ github.run_number }} - 1 ))
            docker stop myapp-prod || true
            docker rm myapp-prod || true
            docker pull vblueice/myapp:1.0.${{ github.run_number }}
            docker run -d -p 8080:80 --name myapp-prod vblueice/myapp:1.0.$PREV_BUILD

















